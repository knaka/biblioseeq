// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: misc.sql

package sqlcgen

import (
	"context"
)

const getLogs = `-- name: GetLogs :many
SELECT id, message, created_at
FROM logs
ORDER BY id DESC
LIMIT 10
`

func (q *Queries) GetLogs(ctx context.Context) ([]*Log, error) {
	rows, err := q.db.QueryContext(ctx, getLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(&i.ID, &i.Message, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVersion = `-- name: GetVersion :one
SELECT sqlite_version()
`

func (q *Queries) GetVersion(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getVersion)
	var sqlite_version string
	err := row.Scan(&sqlite_version)
	return sqlite_version, err
}
